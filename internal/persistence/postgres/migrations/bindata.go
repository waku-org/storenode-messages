// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1_setup.down.sql (136B)
// 1_setup.up.sql (618B)
// doc.go (74B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_setupDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x4c\xa9\xf0\x2d\x4e\x37\xb4\xe6\xc2\x23\x6b\x04\x95\x0d\x71\x74\xf2\x71\x45\x92\x2d\xae\xcc\x4b\x0e\xc9\x2f\xc8\x4c\x0e\x2e\x49\x2c\x29\x2d\xc6\xa1\x2a\x37\xb3\xb8\x38\x33\x2f\xdd\x37\xb5\xb8\x38\x31\x3d\xb5\xd8\x9a\x0b\x10\x00\x00\xff\xff\x82\x27\xd8\xb4\x88\x00\x00\x00")

func _1_setupDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_setupDownSql,
		"1_setup.down.sql",
	)
}

func _1_setupDownSql() (*asset, error) {
	bytes, err := _1_setupDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_setup.down.sql", size: 136, mode: os.FileMode(0664), modTime: time.Unix(1715888633, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x9b, 0xf2, 0x5c, 0xc0, 0xf3, 0xc2, 0x75, 0x25, 0xdb, 0x82, 0x6c, 0xff, 0x1c, 0x18, 0x91, 0x6f, 0x1d, 0x18, 0x3b, 0xf3, 0x76, 0x6d, 0xcc, 0x6, 0x3a, 0x54, 0x65, 0xc4, 0x22, 0xf2, 0x99}}
	return a, nil
}

var __1_setupUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xcd\x6e\xab\x30\x10\x85\xd7\xf1\x53\xcc\x12\x24\x36\xf7\x6e\x59\x91\x64\x9a\x5a\x05\xa7\x02\x57\x22\x4b\x82\x2d\x6a\x29\xfc\x88\xb1\xa5\xf6\xed\xab\x3a\x11\xa2\x10\xa5\x52\xd7\x33\xf3\x9d\x33\xdf\x2e\xc7\x44\x22\xc8\x64\x9b\x22\xf0\x27\x10\x47\x09\x58\xf2\x42\x16\x40\x9f\x5d\x2d\xfb\xc1\xd4\x85\xad\xac\x23\x08\xd8\xa6\xbe\x38\xb2\x7a\xe4\x0a\xb8\x90\x78\xc0\xdc\xef\x8b\xb7\x34\x8d\xd8\x66\x70\x67\x72\x67\x7f\x01\x12\x4b\x39\x9f\x5d\x2a\xb2\xc5\x37\xcf\xb4\x9a\x6c\xd5\x0e\xb0\xe5\x07\x2e\x7e\xec\xbc\xe6\x3c\x4b\xf2\x13\xbc\xe0\x09\x82\x29\x29\x82\x19\x37\x64\x61\xcc\x18\x7b\x50\xba\x35\x44\xa6\x6b\x32\x4d\x54\x35\xda\x97\x1e\x5d\xc7\xd5\xaa\xd1\x9f\x5f\x69\xaf\xe8\xe7\x8a\xde\xd7\x33\x6a\x1e\x7d\x48\xb6\x1f\x75\xd7\x2b\x7d\xef\xf0\x66\x79\x39\xf1\x37\x2a\xb1\x2b\x1c\x2c\x8c\xcd\x7a\x45\x30\x25\x5d\x8d\xdd\x84\x71\xb1\xc7\x72\x21\xcc\xa8\x8f\x8c\x9a\x7f\x70\x14\x4b\x77\xc1\x14\xbd\xc7\x62\x17\xc6\xbf\x53\xfe\xdf\xa3\x78\xfd\x61\xcc\xbe\x02\x00\x00\xff\xff\x8b\x58\x59\x30\x6a\x02\x00\x00")

func _1_setupUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_setupUpSql,
		"1_setup.up.sql",
	)
}

func _1_setupUpSql() (*asset, error) {
	bytes, err := _1_setupUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_setup.up.sql", size: 618, mode: os.FileMode(0664), modTime: time.Unix(1715888758, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0xe5, 0x52, 0x2, 0x8e, 0x32, 0xdd, 0x51, 0xad, 0x2b, 0x26, 0x9a, 0x85, 0x37, 0x2c, 0x6d, 0x8, 0x7e, 0x7f, 0xae, 0xa9, 0x69, 0xb7, 0x83, 0x3e, 0x40, 0x47, 0x1e, 0xc8, 0x2e, 0x48, 0x67}}
	return a, nil
}

var _docGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x0d\xc4\x20\x0c\x05\xd0\x9e\x29\xfe\x02\xd8\xfd\x6d\xe3\x4b\xac\x2f\x44\x82\x09\x78\x7f\xa5\x49\xfd\xa6\x1d\xdd\xe8\xd8\xcf\x55\x8a\x2a\xe3\x47\x1f\xbe\x2c\x1d\x8c\xfa\x6f\xe3\xb4\x34\xd4\xd9\x89\xbb\x71\x59\xb6\x18\x1b\x35\x20\xa2\x9f\x0a\x03\xa2\xe5\x0d\x00\x00\xff\xff\x60\xcd\x06\xbe\x4a\x00\x00\x00")

func docGoBytes() ([]byte, error) {
	return bindataRead(
		_docGo,
		"doc.go",
	)
}

func docGo() (*asset, error) {
	bytes, err := docGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc.go", size: 74, mode: os.FileMode(0664), modTime: time.Unix(1715888633, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x7c, 0x28, 0xcd, 0x47, 0xf2, 0xfa, 0x7c, 0x51, 0x2d, 0xd8, 0x38, 0xb, 0xb0, 0x34, 0x9d, 0x4c, 0x62, 0xa, 0x9e, 0x28, 0xc3, 0x31, 0x23, 0xd9, 0xbb, 0x89, 0x9f, 0xa0, 0x89, 0x1f, 0xe8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_setup.down.sql": _1_setupDownSql,

	"1_setup.up.sql": _1_setupUpSql,

	"doc.go": docGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_setup.down.sql": &bintree{_1_setupDownSql, map[string]*bintree{}},
	"1_setup.up.sql":   &bintree{_1_setupUpSql, map[string]*bintree{}},
	"doc.go":           &bintree{docGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
